<h1 class="cour">CSS</h1>
<h1>Course 2: CSS Selectors</h1>
<p>Hi, in this lesson we will learn all the types of <b>CSS selectors</b>. We will cover the following topics:</p>
<ul>
<li>Tag selectors</li>
<li>Class selectors</li>
<li>ID selectors</li>
<li>Attribute selectors</li>
<li>Pseudo-class selectors</li>
<li>Pseudo-element selectors</li>
</ul>

<h2>Tag selector</h2>
<p>Tag selectors target all elements of the same type. For example, to style all buttons on a page:<br>
<b>Example:</b></p>
<div class="exp">
    <code>&lt;style&gt;<br>
    button { color: blue; }<br> <br>
    &lt;/style&gt;</code>
</div>

<h2>Class Selectors</h2>
<p>Class selectors style specific groups of elements. <br><b>Example: styling elements with the¬†class¬†'bloc':</b></p>
<div class="exp">
    <code>&lt;style&gt;<br>
    .bloc { display: block;
    <div class="cmt">/* styles the entire block, not just inline content */</div>
     }<br> <br>
    &lt;/style&gt;</code>
</div>

<h2>ID selectors</h2>
<p>ID selectors target a specific element. <br>Example: styling a paragraph with¬†the¬†id¬†"bold":</p>
<div class="exp">
    <code>&lt;style&gt;<br>
    #bold { font-weight: bold;
    <div class="cmt">/* sets text weight: "bold", "normal", or a number 100-900 */</div>
     }<br> <br>
    &lt;/style&gt;</code>
</div>

<h2>Attribute selectors</h2>
<p>Attribute selectors target elements with a specific attribute or attribute value.</p>
<div class="exp">
    <code>&lt;style&gt;<br>
    [href] { 
    text-decoration: none;
    <div class="cmt">/* controls text decoration: underline, overline, line-through, none */</div>
     }<br> <br>
    [type="submit"] { 
    border-width: 2px; <div class="cmt">/* border width */</div>
    border-color: cyan; <div class="cmt">/* border color */</div>
    border-style: solid; <div class="cmt">/* border style: solid, dashed, dotted, double */</div>
    border-radius: 10px; <div class="cmt">/* rounds corners */</div>
     }<br> <br>
    &lt;/style&gt;</code>
</div>

<div class="tbl_area">
 <table class="tbl_2">
 <tr><td class="tbl_2_h">Attribute selector</td><td class="tbl_2_2_h">Explanation</td></tr>
<tr><td class="tbl_2_1">[href="btn"]</td><td class="tbl_2_2">Targets elements with href="btn"</td></tr>
<tr><td class="tbl_2_1">[href^="btn"]</td><td class="tbl_2_2">Targets elements whose href starts with "btn", e.g., href="btn-primary"</td></tr>
<tr><td class="tbl_2_1">[href$="btn"]</td><td class="tbl_2_2">Targets elements whose href ends with "btn", e.g., href="secondary-primary-btn"</td></tr>
<tr><td class="tbl_2_1">[href~="btn"]</td><td class="tbl_2_2">Selects elements whose href contains the word "btn" as a separate¬†value, e.g., href="secondary primary btn"</td></tr>
<tr><td class="tbl_2_1">[href*="btn"]</td><td class="tbl_2_2">Targets elements whose href contains "btn" anywhere, e.g., href="secondary-primary-btn"</td></tr>
<tr><td class="tbl_2_1_d">[href|="btn"]</td><td class="tbl_2_2_d">Targets elements with href="btn" or starting with "btn-", e.g., href="btn-danger"</td></tr>
</table>
</div>

<h2>Pseudo-class selectors</h2>
<p>Pseudo-classes style elements based on user actions, structure, form/input state, or UI state.</p>
<div class="exp">
    <code>&lt;style&gt;<br>
    div:hover { 
     <div class="cmt">/* style when mouse is over the div */</div>
    background-color: cyan;
     }<br> <br>
    input[type="text"]:focus { 
     <div class="cmt">/* Style applied while typing inside a text¬†input¬†field */</div>
    border-color: cyan;
     }<br> <br>
    p:first-child { 
     <div class="cmt">/* Style the first paragraph that is a child¬†of¬†its¬†parent */</div>
    background-color: cyan;
     }<br> <br>
    p:is(.highlight, .special) { 
     <div class="cmt">/*Applies styles to all &lt;p&gt;  elements that have the class .highlight¬†or¬†.special¬†*/</div>
    background-color: cyan;
     }<br> <br>
    &lt;/style&gt;</code>
</div>

<!-- Pseudo-class (Action) -->
<div class="tbl_area">
 <table class="tbl_2">
 <tr><td class="tbl_2_h">Pseudo-class (Action)</td><td class="tbl_2_2_h">Explanation</td></tr>
<tr><td class="tbl_2_1">:hover</td><td class="tbl_2_2">Targets the element when the mouse is over it</td></tr>
<tr><td class="tbl_2_1">:active</td><td class="tbl_2_2">Targets the element when it is being clicked</td></tr>
<tr><td class="tbl_2_1">:focus</td><td class="tbl_2_2">Applies when the element is focused (e.g., input text)</td></tr>
<tr><td class="tbl_2_1">:focus-within</td><td class="tbl_2_2">Applies if the element or its children are focused</td></tr>
<tr><td class="tbl_2_1_d">:focus-visible</td><td class="tbl_2_2_d">Appears only when using keyboard or assistive technologies</td></tr>
</table>
</div>
<div class="exp">
 A real example of the :hover pseudo-class. The square below is a div that changes background color when hovered.
 <div class="hover"></div>
</div>
<!-- Pseudo-class (Structure) -->
<div class="tbl_area">
 <table class="tbl_2">
 <tr><td class="tbl_2_h">Pseudo-class (Structure)</td><td class="tbl_2_2_h">Explanation</td></tr>
<tr><td class="tbl_2_1">:first-child</td><td class="tbl_2_2">Styles the first child of a parent</td></tr>
<tr><td class="tbl_2_1">:last-child</td><td class="tbl_2_2">Styles the last child of a parent</td></tr>
<tr><td class="tbl_2_1">:nth-child(n)</td><td class="tbl_2_2">Matches the nth child of a parent</td></tr>
<tr><td class="tbl_2_1">:nth-last-child(n)</td><td class="tbl_2_2">Matches the nth child counting from the end</td></tr>
<tr><td class="tbl_2_1">:nth-of-type(n)</td><td class="tbl_2_2">Matches the nth element of its type</td></tr>
<tr><td class="tbl_2_1">:nth-last-of-type(n)</td><td class="tbl_2_2">Matches the nth element of its type counting from the end</td></tr>
<tr><td class="tbl_2_1">:only-child</td><td class="tbl_2_2">Applies if the element is the only child of its parent</td></tr>
<tr><td class="tbl_2_1">:only-of-type</td><td class="tbl_2_2">Applies if the element is the only one of its type in the parent</td></tr>
<tr><td class="tbl_2_1_d">:empty</td><td class="tbl_2_2_d">Applies if the element has no children</td></tr>
</table>
</div>


<!-- Pseudo-class (Form & Input State) -->
<div class="tbl_area">
 <table class="tbl_2">
 <tr><td class="tbl_2_h">Pseudo-class (Form & Input State)</td><td class="tbl_2_2_h">Explanation</td></tr>
<tr><td class="tbl_2_1">:checked</td><td class="tbl_2_2">Applies if a radio or checkbox is checked</td></tr>
<tr><td class="tbl_2_1">:disabled</td><td class="tbl_2_2">Applies if the input is disabled</td></tr>
<tr><td class="tbl_2_1">:enabled</td><td class="tbl_2_2">Applies if the input is enabled (default state)</td></tr>
<tr><td class="tbl_2_1">:required</td><td class="tbl_2_2">Applies if the input is required</td></tr>
<tr><td class="tbl_2_1">:optional</td><td class="tbl_2_2">Applies to optional inputs</td></tr>
<tr><td class="tbl_2_1">:valid</td><td class="tbl_2_2">Applies if the input value is valid</td></tr>
<tr><td class="tbl_2_1">:invalid</td><td class="tbl_2_2">Applies if the input value is invalid</td></tr>
<tr><td class="tbl_2_1">:in-range</td><td class="tbl_2_2">Targets inputs whose value is within the allowed range</td></tr>
<tr><td class="tbl_2_1">:out-of-range</td><td class="tbl_2_2">Targets inputs whose value is outside the allowed range</td></tr>
<tr><td class="tbl_2_1">:read-only</td><td class="tbl_2_2">Targets inputs that cannot be edited</td></tr>
<tr><td class="tbl_2_1_d">:read-write</td><td class="tbl_2_2_d">Targets inputs that can be edited</td></tr>
</table>
</div>

<!-- Pseudo-class (UI State) -->
<div class="tbl_area">
 <table class="tbl_2">
 <tr><td class="tbl_2_h">Pseudo-class (UI State)</td><td class="tbl_2_2_h">Explanation</td></tr>
<tr><td class="tbl_2_1">:is()</td><td class="tbl_2_2">Targets elements matching the selector(s) inside parentheses</td></tr>
<tr><td class="tbl_2_1">:where()</td><td class="tbl_2_2">Same as :is() but without affecting specificity</td></tr>
<tr><td class="tbl_2_1">:has()</td><td class="tbl_2_2">Targets elements that contain elements matching the selector inside parentheses</td></tr>
<tr><td class="tbl_2_1_d">:not()</td><td class="tbl_2_2_d">Targets elements that do NOT match the selector inside parentheses</td></tr>
</table>
</div>

<h2>Pseudo-element selectors</h2>
<p>Pseudo-elements allow styling a specific part of an element using "::" before it.</p>
<div class="exp">
    <code>&lt;style&gt;<br>
    h1::before { 
     content: "hello";
     <div class="cmt">/* adds "hello" before the h1 content */</div>
     }<br> <br>
    input::file-selector-button { 
    border-color: cyan;
     }<br> <br>
    b::first-letter { 
     <div class="cmt">/* Styles the first letter¬†of¬†the¬†element */</div>
    background-color: cyan;
     }<br> <br>
    &lt;/style&gt;</code>
</div>

<div class="tbl_area">
 <table class="tbl_2">
 <tr><td class="tbl_2_h">Pseudo-element</td><td class="tbl_2_2_h">Explanation</td></tr>
<tr><td class="tbl_2_1">::before</td><td class="tbl_2_2">Adds content before the element content</td></tr>
<tr><td class="tbl_2_1">::after</td><td class="tbl_2_2">Adds content after the element content</td></tr>
<tr><td class="tbl_2_1">::first-line</td><td class="tbl_2_2">Styles the first line of the element</td></tr>
<tr><td class="tbl_2_1">::first-letter</td><td class="tbl_2_2">Styles the first letter of the element</td></tr>
<tr><td class="tbl_2_1">::placeholder</td><td class="tbl_2_2">Styles the placeholder of input elements</td></tr>
<tr><td class="tbl_2_1">::selection</td><td class="tbl_2_2">Styles the text selected by the user</td></tr>
<tr><td class="tbl_2_1">::marker</td><td class="tbl_2_2">Styles the bullet or numbering of lists</td></tr>
<tr><td class="tbl_2_1_d">::file-selector-button</td><td class="tbl_2_2_d">Styles the button of input type="file"</td></tr>
</table>
</div>

<h2>üéÅ Bonus Tip:</h2>
<ul>
<li>Pseudo-classes or pseudo-elements must have a selector (tag, id, class, attribute) before them to work correctly.</li>
<li>You can combine selectors for precision. For example:</li>
<code>&lt;style&gt;<br>
    input[type="text"]:hover { 
     <div class="cmt">/* styles text inputs when hovered */</div>
    background-color: cyan;
     }<br> <br>
&lt;/style&gt;</code>
<li>Certain symbols can be used between¬†selectors: (" ", "+", ">", "~")</li>
</ul>

<div class="tbl_area">
 <table class="tbl_2">
 <tr><td class="tbl_2_h">Symbol</td><td class="tbl_2_2_h">Explanation</td></tr>
<tr><td class="tbl_2_1">space</td><td class="tbl_2_2">Selects any descendant element (nested¬†at¬†any¬†level)</td></tr>
<tr><td class="tbl_2_1">></td><td class="tbl_2_2">Only direct children</td></tr>
<tr><td class="tbl_2_1">~</td><td class="tbl_2_2">All following siblings</td></tr>
<tr><td class="tbl_2_1_d">+</td><td class="tbl_2_2_d">Next sibling only</td></tr>
</table>
</div>

<div class="exp">
    <code>&lt;style&gt;<br>
    div p { 
     <div class="cmt">/* any p inside a div */</div>
    background-color: cyan;
     }<br> <br>
    form > input { 
     <div class="cmt">/* direct input children of a form */</div>
    border-color: cyan;
     }<br> <br>
    h2 + p { 
     <div class="cmt">/* first next sibling p of h2 */</div>
    background-color: cyan;
     }<br> <br>
    div ~ p{ 
     <div class="cmt">/* all following p siblings of div */</div>
    background-color: cyan;
     }<br> <br>
    &lt;/style&gt;</code>
</div>